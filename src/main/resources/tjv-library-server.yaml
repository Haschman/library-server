openapi: 3.0.1
info:
  title: Library server API
  version: 0.0.1
servers:
  - url: http://localhost:8080
paths:
  /locations:
    get:
      tags:
        - location
      operationId: readAll
      description: 'Read all locations'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LocationDTO'
    post:
      tags:
        - location
      operationId: create
      description: 'Create a location'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationDTO'
        '400':
          description: 'Bad request - Something is missing or incorrect value'
        '409':
          description: 'Conflict - You are trying to create an entity that already exists.'

  /locations/{id}:
    get:
      tags:
        - location
      operationId: readOne
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationDTO'
    put:
      tags:
        - location
      operationId: update
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationDTO'
        required: true
      responses:
        '204':
          description: No Content
    delete:
      tags:
        - location
      operationId: delete
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK



  /books:
    get:
      tags:
        - book
      operationId: readAll_1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookDTO'
    post:
      tags:
        - book
      operationId: create_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDTO'
        '400':
          description: 'Bad request - Something is missing or incorrect value'
        '404':
          description: 'Not found - You are trying to create a new entity that contains another entity that does not exist.'
        '409':
          description: 'Conflict - You are trying to create an entity that already exists.'

  /books/location:
    get:
      tags:
        - book
      operationId: findAllFromLocation
      parameters:
        - name: locationID
          in: query
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookDTO'
    delete:
      tags:
        - book
      operationId: deleteAllBooksFromLocation
      parameters:
        - name: locationID
          in: query
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK

  /books/count:
    get:
      tags:
        - book
      operationId: countAllBooks
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int32

  /books/author:
    get:
      tags:
        - book
      operationId: findAllByAuthor
      parameters:
        - name: authorID
          in: query
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookDTO'
    delete:
      tags:
        - book
      operationId: deleteAllBooksByAuthor
      parameters:
        - name: authorID
          in: query
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK

  /books/{id}:
    get:
      tags:
        - book
      operationId: readOne_1
      description: 'Read all books'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDTO'
    put:
      tags:
        - book
      operationId: update_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookDTO'
        required: true
      responses:
        '204':
          description: No Content
    delete:
      tags:
        - book
      operationId: delete_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK



  /authors:
    get:
      tags:
        - author
      operationId: readAll_2
      description: 'Read all authors'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthorDTO'
    post:
      tags:
        - author
      operationId: create_2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorDTO'
        '400':
          description: 'Bad request - Something is missing or incorrect value'
        '409':
          description: 'Conflict - You are trying to create an entity that already exists.'

  /authors/count:
    get:
      tags:
        - author
      operationId: countAllAuthors
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int32

  /authors/{id}:
    get:
      tags:
        - author
      operationId: readOne_2
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorDTO'
    put:
      tags:
        - author
      operationId: update_2
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorDTO'
        required: true
      responses:
        '204':
          description: No Content
    delete:
      tags:
        - author
      operationId: delete_2
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK


components:
  schemas:
    LocationDTO:
      required:
        - shelf
        - stand
      type: object
      properties:
        id:
          type: integer
          format: int64
        stand:
          maximum: 100
          minimum: 1
          type: integer
          format: int32
        shelf:
          maximum: 100
          minimum: 1
          type: integer
          format: int32
    BookDTO:
      required:
        - language
        - location
        - name
      type: object
      properties:
        name:
          type: string
        language:
          type: string
        publicationYear:
          type: object
          properties:
            value:
              type: integer
              format: int32
            leap:
              type: boolean
        category:
          type: string
        genre:
          type: string
        location:
          type: integer
          format: int64
        authors:
          uniqueItems: true
          type: array
          items:
            type: integer
            format: int64
        id:
          type: integer
          format: int64
        isbn:
          type: string
    AuthorDTO:
      required:
        - surname
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        surname:
          type: string
        nationality:
          type: string
        century:
          type: integer
          format: int32
